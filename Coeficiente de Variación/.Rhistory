wcvATp18_caca <- levels(wcvATp18$Mat)[levels(wcvATp18$Mat) == "18-24"] <- "2"
wcvATp18_caca <- levels(wcvATp18$Mat)[levels(wcvATp18$Mat) == "24-18"] <- "3"
wcvATp18_caca <- levels(wcvATp18$Mat)[levels(wcvATp18$Mat) == "24-24"] <- "4"
radarchart( wcvATp18,
cglty=1,
cglcol="grey",
cglwd=1,
pcol=cbPalette,
plwd=2,
plty=1)
legend("topright", legend = rownames(wcvATp18[-c(1,2),]), bty = "n", pch=20 , col=cbPalette , text.col = "grey25", cex=1.2, pt.cex=3)
radarchart( wcvATp18,
cglty=1,
cglcol="grey",
cglwd=1,
pcol=cbPalette,
plwd=2,
plty=1)
View(wcvATp18)
setwd("~/Desktop/RABIOS")
setwd("~/Desktop/Field_Experiment")
setwd("~/Desktop/Doc/Field_Experiment")
library(tidyverse)
library(plyr)
library(viridis)
library(viridisLite)
library(car)
library(carData)
library(patchwork)
# Load required libraries
library(readxl)
library(dplyr)
# Replace 'your_excel_file.xlsx' with the actual file path
excel_file <- read_excel("Emergencia-2023-2-autumn.xlsx")
# Rename columns for clarity
colnames(excel_file) <- c("ID", "Ecotype", "Mat-Treat", "Block", "Sown_Date", "Total_Seeds", paste0("D", 1:53), "GermFinal")
# Create an empty data frame to store the transformed data
transformed_data <- data.frame()
# Iterate through each day column (D1, D2, etc.)
for (day in 1:53) {
# Filter rows where the number of plants germinated on the day is greater than 0
day_subset <- excel_file %>%
select(Ecotype, `Mat-Treat`, paste0("D", day)) %>%
rename(Frec = paste0("D", day)) %>%
filter(Frec > 0)
# Append the subset to the transformed data frame
transformed_data <- bind_rows(transformed_data, day_subset)
}
# Create the frequency table
frequency_table <- transformed_data %>%
group_by(Ecotype, `Mat-Treat`, Frec) %>%
summarise(Count = n()) %>%
ungroup()
# Print the frequency table
print(frequency_table)
# Leer el archivo CSV
datos <- read.csv("datos-origen-ecotipos.csv")
setwd("~/Desktop/RABIOS")
# Leer el archivo CSV
datos <- read.csv("datos-origen-ecotipos.csv")
datos$Ecotipo <- as.factor(datos$Ecotipo)
datos$Ecotipo <- factor(datos$Ecotipo, levels = c("Ler-0","Oy-0","Tu-0"))
head(datos)
datos <- datos %>%
filter(!is.na(Ecotipo))
# Definir los límites geográficos de la región que deseas mostrar
xmin <- -10  # Longitud mínima
xmax <- 25   # Longitud máxima
ymin <- 40   # Latitud mínima
ymax <- 65   # Latitud máxima
# Filtrar los datos del mapa para mostrar solo la región definida
map_data_filtered <- map_data("world") %>%
filter(long >= xmin, long <= xmax, lat >= ymin, lat <= ymax)
# Crear el mapa de la región definida
mi_mapa <- ggplot() +
geom_polygon(data = map_data_filtered, aes(x = long, y = lat, group = group), color = "gray50", fill = "white", size = 0.1) +  # Dibujar fronteras con líneas más finas
geom_path(data = map_data_filtered, aes(x = long, y = lat, group = group), color = "gray50", size = 0.1) +  # Dibujar límites de países con líneas más finas
geom_point(data = datos, aes(x = Long.Decim, y = Lat.Decima, colour = Ecotipo), size = 2) +  # Puntos con color
geom_text_repel(data = datos, aes(x = Long.Decim, y = Lat.Decima, label = Ecotipo), size = 3, hjust = 0, vjust = 0) +  # Etiquetas con el nombre
labs(x = "Longitude", y = "Latitude") +
scale_color_viridis(discrete = TRUE, name = "Ecotypes") +  # Establecer el título de la leyenda
theme_minimal() +
coord_fixed(ratio = 1) +  # Relación de aspecto 1:1 para evitar la distorsión
xlim(xmin, xmax) +  # Establecer límites geográficos en el eje x
ylim(ymin, ymax) +  # Establecer límites geográficos en el eje y
theme(legend.position = "right")  # Mover la leyenda a la derecha
# Imprimir el mapa
print(mi_mapa)
# Cargar las librerías necesarias
library(ggplot2)
library(maps)
library(dplyr)
library(sf)
library(ggspatial)
# Crear el mapa de la región definida
mi_mapa <- ggplot() +
geom_polygon(data = map_data_filtered, aes(x = long, y = lat, group = group), color = "gray50", fill = "white", size = 0.1) +  # Dibujar fronteras con líneas más finas
geom_path(data = map_data_filtered, aes(x = long, y = lat, group = group), color = "gray50", size = 0.1) +  # Dibujar límites de países con líneas más finas
geom_point(data = datos, aes(x = Long.Decim, y = Lat.Decima, colour = Ecotipo), size = 2) +  # Puntos con color
geom_text_repel(data = datos, aes(x = Long.Decim, y = Lat.Decima, label = Ecotipo), size = 3, hjust = 0, vjust = 0) +  # Etiquetas con el nombre
labs(x = "Longitude", y = "Latitude") +
scale_color_viridis(discrete = TRUE, name = "Ecotypes") +  # Establecer el título de la leyenda
theme_minimal() +
coord_fixed(ratio = 1) +  # Relación de aspecto 1:1 para evitar la distorsión
xlim(xmin, xmax) +  # Establecer límites geográficos en el eje x
ylim(ymin, ymax) +  # Establecer límites geográficos en el eje y
theme(legend.position = "right")  # Mover la leyenda a la derecha
# Imprimir el mapa
print(mi_mapa)
# Definir los límites geográficos de la región que deseas mostrar
xmin <- 0  # Longitud mínima
xmax <- 80   # Longitud máxima
ymin <- 10   # Latitud mínima
ymax <- 65   # Latitud máxima
# Filtrar los datos del mapa para mostrar solo la región definida
map_data_filtered <- map_data("world")
# Crear el mapa de la región definida
mi_mapa <- ggplot() +
geom_sf()+
geom_polygon(data = map_data_filtered, aes(x = long, y = lat, group = group), color = "gray50", fill = "white", size = 0.1) +  # Dibujar fronteras con líneas más finas
geom_path(data = map_data_filtered, aes(x = long, y = lat, group = group), color = "gray50", size = 0.1) +  # Dibujar límites de países con líneas más finas
geom_point(data = datos, aes(x = Long.Decim, y = Lat.Decima, colour = Ecotipo), size = 2) +  # Puntos con color
geom_text_repel(data = datos, aes(x = Long.Decim, y = Lat.Decima, label = Ecotipo), size = 5, box.padding = 0.5) +  # Etiquetas con el nombre
labs(x = "Longitude", y = "Latitude") +
scale_color_viridis(discrete = TRUE, name = "Ecotypes")+
theme_bw() +
coord_fixed(ratio = 1) +  # Relación de aspecto 1:1 para evitar la distorsión
xlim(xmin, xmax) +  # Establecer límites geográficos en el eje x
ylim(ymin, ymax) +  # Establecer límites geográficos en el eje y
theme(legend.position = "right",text = element_text(size = 20)) # Mover la leyenda a la derecha
mi_mapa +
theme(
plot.background = element_blank(),
panel.background = element_blank(),
plot.margin = margin(1, 1, 1, 1, "cm"),
aspect.ratio = 9/16)
library(rnaturalearth)
library(rnaturalearthdata)
# Load required libraries
library(rnaturalearth)
library(rnaturalearthdata)
# Crear el mapa de la región definida
mi_mapa <- ggplot() +
geom_polygon(data = map_data_filtered, aes(x = long, y = lat, group = group), color = "gray50", fill = "white", size = 0.1) +  # Dibujar fronteras con líneas más finas
geom_path(data = map_data_filtered, aes(x = long, y = lat, group = group), color = "gray50", size = 0.1) +  # Dibujar límites de países con líneas más finas
geom_point(data = datos, aes(x = Long.Decim, y = Lat.Decima, colour = Ecotipo), size = 2) +  # Puntos con color
geom_text_repel(data = datos, aes(x = Long.Decim, y = Lat.Decima, label = Ecotipo), size = 3, hjust = 0, vjust = 0) +  # Etiquetas con el nombre
labs(x = "Longitude", y = "Latitude") +
scale_color_viridis(discrete = TRUE, name = "Ecotypes") +  # Establecer el título de la leyenda
theme_minimal() +
coord_fixed(ratio = 1) +  # Relación de aspecto 1:1 para evitar la distorsión
xlim(xmin, xmax) +  # Establecer límites geográficos en el eje x
ylim(ymin, ymax) +  # Establecer límites geográficos en el eje y
theme(legend.position = "right")  # Mover la leyenda a la derecha
# Crear el mapa de la región definida
mi_mapa <- ggplot() +
geom_polygon(data = map_data_filtered, aes(x = long, y = lat, group = group), color = "gray50", fill = "white", size = 0.1) +  # Dibujar fronteras con líneas más finas
geom_path(data = map_data_filtered, aes(x = long, y = lat, group = group), color = "gray50", size = 0.1) +  # Dibujar límites de países con líneas más finas
geom_point(data = datos, aes(x = Long.Decim, y = Lat.Decima, colour = Ecotipo), size = 2) +  # Puntos con color
#  geom_text_repel(data = datos, aes(x = Long.Decim, y = Lat.Decima, label = Ecotipo), size = 3, hjust = 0, vjust = 0) +  # Etiquetas con el nombre
labs(x = "Longitude", y = "Latitude") +
scale_color_viridis(discrete = TRUE, name = "Ecotypes") +  # Establecer el título de la leyenda
theme_minimal() +
coord_fixed(ratio = 1) +  # Relación de aspecto 1:1 para evitar la distorsión
xlim(xmin, xmax) +  # Establecer límites geográficos en el eje x
ylim(ymin, ymax) +  # Establecer límites geográficos en el eje y
theme(legend.position = "right")  # Mover la leyenda a la derecha
# Imprimir el mapa
print(mi_mapa)
# Definir los límites geográficos de la región que deseas mostrar
xmin <- 0  # Longitud mínima
xmax <- 80   # Longitud máxima
ymin <- 10   # Latitud mínima
ymax <- 65   # Latitud máxima
# Filtrar los datos del mapa para mostrar solo la región definida
map_data_filtered <- map_data("world")
# Crear el mapa de la región definida
mi_mapa <- ggplot() +
geom_sf()+
geom_polygon(data = map_data_filtered, aes(x = long, y = lat, group = group), color = "gray50", fill = "white", size = 0.1) +  # Dibujar fronteras con líneas más finas
geom_path(data = map_data_filtered, aes(x = long, y = lat, group = group), color = "gray50", size = 0.1) +  # Dibujar límites de países con líneas más finas
geom_point(data = datos, aes(x = Long.Decim, y = Lat.Decima, colour = Ecotipo), size = 2) +  # Puntos con color
geom_text_repel(data = datos, aes(x = Long.Decim, y = Lat.Decima, label = Ecotipo), size = 5, box.padding = 0.5) +  # Etiquetas con el nombre
labs(x = "Longitude", y = "Latitude") +
scale_color_viridis(discrete = TRUE, name = "Ecotypes")+
theme_bw() +
coord_fixed(ratio = 1) +  # Relación de aspecto 1:1 para evitar la distorsión
xlim(xmin, xmax) +  # Establecer límites geográficos en el eje x
ylim(ymin, ymax) +  # Establecer límites geográficos en el eje y
theme(legend.position = "right",text = element_text(size = 20)) # Mover la leyenda a la derecha
# Crear el mapa de la región definida
mi_mapa <- ggplot() +
geom_sf()+
geom_polygon(data = map_data_filtered, aes(x = long, y = lat, group = group), color = "gray50", fill = "white", size = 0.1) +  # Dibujar fronteras con líneas más finas
geom_path(data = map_data_filtered, aes(x = long, y = lat, group = group), color = "gray50", size = 0.1) +  # Dibujar límites de países con líneas más finas
geom_point(data = datos, aes(x = Long.Decim, y = Lat.Decima, colour = Ecotipo), size = 2) +  # Puntos con color
#  geom_text_repel(data = datos, aes(x = Long.Decim, y = Lat.Decima, label = Ecotipo), size = 5, box.padding = 0.5) +  # Etiquetas con el nombre
labs(x = "Longitude", y = "Latitude") +
scale_color_viridis(discrete = TRUE, name = "Ecotypes")+
theme_bw() +
coord_fixed(ratio = 1) +  # Relación de aspecto 1:1 para evitar la distorsión
xlim(xmin, xmax) +  # Establecer límites geográficos en el eje x
ylim(ymin, ymax) +  # Establecer límites geográficos en el eje y
theme(legend.position = "right",text = element_text(size = 20)) # Mover la leyenda a la derecha
mi_mapa +
theme(
plot.background = element_blank(),
panel.background = element_blank(),
plot.margin = margin(1, 1, 1, 1, "cm"),
aspect.ratio = 9/16)
world <- ne_countries(scale = "medium", returnclass = "sf")
mi_mapa <- ggplot(data = world) +
geom_sf(fill = "antiquewhite")+
annotation_scale(location = "br", width_hint = 0.5) +
annotation_north_arrow(location = "bl", which_north = "grid",
pad_x = unit(0.75, "in"), pad_y = unit(0.5, "in"),
style = north_arrow_fancy_orienteering()) +
coord_sf(xlim = c(0, 25), ylim = c(40, 65), expand = FALSE) +
geom_polygon(data = map_data_filtered, aes(x = long, y = lat, group = group), color = "gray50", fill = "white", size = 0.1) +  # Dibujar fronteras con líneas más finas
geom_path(data = map_data_filtered, aes(x = long, y = lat, group = group), color = "gray50", size = 0.1) +  # Dibujar límites de países con líneas más finas
geom_point(data = datos, aes(x = Long.Decim, y = Lat.Decima, colour = Ecotipo), size = 1.5) +  # Puntos con color
geom_text_repel(data = datos, aes(x = Long.Decim, y = Lat.Decima, label = Ecotipo), size = 3, box.padding = 0.4) +  # Etiquetas con el nombre
labs(x = "Longitud", y = "Latitud") +
scale_color_viridis(discrete = TRUE, name = "Ecotipos")+
theme_bw() +
# coord_fixed(ratio = 1) +  # Relación de aspecto 1:1 para evitar la distorsión
#  xlim(xmin, xmax) +  # Establecer límites geográficos en el eje x
#  ylim(ymin, ymax) +  # Establecer límites geográficos en el eje y
theme(legend.position = "right",text = element_text(size = 20), # Mover la leyenda a la derecha
panel.grid.major = element_line(color = gray(.5),
linetype = "dashed",
size = 0.5),
panel.background = element_rect(fill = "aliceblue", world$mapcolor7))
mi_mapa <- ggplot(data = world) +
geom_sf(fill = "antiquewhite") +
coord_sf(xlim = c(0, 25), ylim = c(40, 65), expand = FALSE) +
geom_polygon(data = map_data_filtered, aes(x = long, y = lat, group = group), color = "gray50", fill = "antiquewhite", size = 0.1) +
# geom_path(data = map_data_filtered, aes(x = long, y = lat, group = group), color = "gray50", size = 0.1) +
geom_point(data = datos, aes(x = Long.Decim, y = Lat.Decima, colour = Ecotipo), size = 3) +
geom_text_repel(data = datos, aes(x = Long.Decim, y = Lat.Decima, label = Ecotipo), size = 5, box.padding = 0.4) +
labs(x = "Longitude", y = "Latitude") +
ylim(40,65)+
scale_color_viridis(discrete = TRUE, name = "Ecotypes") +
theme_bw() +
theme(legend.position = "right", text = element_text(size = 20),
panel.grid.major = element_line(color = gray(.5),
linetype = "dashed",
size = 0.5),
panel.background = element_rect(fill = "aliceblue", colour = "white"),
axis.text.x = element_text(angle = 45, hjust = 1)) +
annotation_scale(location = "br", width_hint = 0.5) +
annotation_north_arrow(location = "tl", which_north = "grid",
pad_x = unit(0.75, "in"), pad_y = unit(0.5, "in"),
style = north_arrow_fancy_orienteering())
mi_mapa
library(ggplot2)
library(sf)
library(ggrepel)
# Crear el mapa de la región definida
mi_mapa <- ggplot() +
geom_polygon(data = map_data_filtered, aes(x = long, y = lat, group = group), color = "gray50", fill = "white", size = 0.1) +  # Dibujar fronteras con líneas más finas
geom_path(data = map_data_filtered, aes(x = long, y = lat, group = group), color = "gray50", size = 0.1) +  # Dibujar límites de países con líneas más finas
geom_point(data = datos, aes(x = Long.Decim, y = Lat.Decima, colour = Ecotipo), size = 2) +  # Puntos con color
#  geom_text_repel(data = datos, aes(x = Long.Decim, y = Lat.Decima, label = Ecotipo), size = 3, hjust = 0, vjust = 0) +  # Etiquetas con el nombre
labs(x = "Longitude", y = "Latitude") +
scale_color_viridis(discrete = TRUE, name = "Ecotypes") +  # Establecer el título de la leyenda
theme_minimal() +
coord_fixed(ratio = 1) +  # Relación de aspecto 1:1 para evitar la distorsión
xlim(xmin, xmax) +  # Establecer límites geográficos en el eje x
ylim(ymin, ymax) +  # Establecer límites geográficos en el eje y
theme(legend.position = "right")  # Mover la leyenda a la derecha
# Imprimir el mapa
print(mi_mapa)
# Definir los límites geográficos de la región que deseas mostrar
xmin <- 0  # Longitud mínima
xmax <- 80   # Longitud máxima
ymin <- 10   # Latitud mínima
ymax <- 65   # Latitud máxima
# Filtrar los datos del mapa para mostrar solo la región definida
map_data_filtered <- map_data("world")
# Crear el mapa de la región definida
mi_mapa <- ggplot() +
geom_sf()+
geom_polygon(data = map_data_filtered, aes(x = long, y = lat, group = group), color = "gray50", fill = "white", size = 0.1) +  # Dibujar fronteras con líneas más finas
geom_path(data = map_data_filtered, aes(x = long, y = lat, group = group), color = "gray50", size = 0.1) +  # Dibujar límites de países con líneas más finas
geom_point(data = datos, aes(x = Long.Decim, y = Lat.Decima, colour = Ecotipo), size = 2) +  # Puntos con color
#  geom_text_repel(data = datos, aes(x = Long.Decim, y = Lat.Decima, label = Ecotipo), size = 5, box.padding = 0.5) +  # Etiquetas con el nombre
labs(x = "Longitude", y = "Latitude") +
scale_color_viridis(discrete = TRUE, name = "Ecotypes")+
theme_bw() +
coord_fixed(ratio = 1) +  # Relación de aspecto 1:1 para evitar la distorsión
xlim(xmin, xmax) +  # Establecer límites geográficos en el eje x
ylim(ymin, ymax) +  # Establecer límites geográficos en el eje y
theme(legend.position = "right",text = element_text(size = 20)) # Mover la leyenda a la derecha
mi_mapa +
theme(
plot.background = element_blank(),
panel.background = element_blank(),
plot.margin = margin(1, 1, 1, 1, "cm"),
aspect.ratio = 9/16)
world <- ne_countries(scale = "medium", returnclass = "sf")
mi_mapa <- ggplot(data = world) +
geom_sf(fill = "antiquewhite")+
annotation_scale(location = "br", width_hint = 0.5) +
annotation_north_arrow(location = "bl", which_north = "grid",
pad_x = unit(0.75, "in"), pad_y = unit(0.5, "in"),
style = north_arrow_fancy_orienteering()) +
coord_sf(xlim = c(0, 25), ylim = c(40, 65), expand = FALSE) +
geom_polygon(data = map_data_filtered, aes(x = long, y = lat, group = group), color = "gray50", fill = "white", size = 0.1) +  # Dibujar fronteras con líneas más finas
geom_path(data = map_data_filtered, aes(x = long, y = lat, group = group), color = "gray50", size = 0.1) +  # Dibujar límites de países con líneas más finas
geom_point(data = datos, aes(x = Long.Decim, y = Lat.Decima, colour = Ecotipo), size = 1.5) +  # Puntos con color
geom_text_repel(data = datos, aes(x = Long.Decim, y = Lat.Decima, label = Ecotipo), size = 3, box.padding = 0.4) +  # Etiquetas con el nombre
labs(x = "Longitud", y = "Latitud") +
scale_color_viridis(discrete = TRUE, name = "Ecotipos")+
theme_bw() +
# coord_fixed(ratio = 1) +  # Relación de aspecto 1:1 para evitar la distorsión
#  xlim(xmin, xmax) +  # Establecer límites geográficos en el eje x
#  ylim(ymin, ymax) +  # Establecer límites geográficos en el eje y
theme(legend.position = "right",text = element_text(size = 20), # Mover la leyenda a la derecha
panel.grid.major = element_line(color = gray(.5),
linetype = "dashed",
size = 0.5),
panel.background = element_rect(fill = "aliceblue", world$mapcolor7))
print(mi_mapa)
mi_mapa <- ggplot(data = world) +
geom_sf(fill = "antiquewhite") +
coord_sf(xlim = c(0, 25), ylim = c(40, 65), expand = FALSE) +
geom_polygon(data = map_data_filtered, aes(x = long, y = lat, group = group), color = "gray50", fill = "antiquewhite", size = 0.1) +
# geom_path(data = map_data_filtered, aes(x = long, y = lat, group = group), color = "gray50", size = 0.1) +
geom_point(data = datos, aes(x = Long.Decim, y = Lat.Decima, colour = Ecotipo), size = 3) +
geom_text_repel(data = datos, aes(x = Long.Decim, y = Lat.Decima, label = Ecotipo), size = 5, box.padding = 0.4) +
labs(x = "Longitude", y = "Latitude") +
ylim(40,65)+
scale_color_viridis(discrete = TRUE, name = "Ecotypes") +
theme_bw() +
theme(legend.position = "right", text = element_text(size = 20),
panel.grid.major = element_line(color = gray(.5),
linetype = "dashed",
size = 0.5),
panel.background = element_rect(fill = "aliceblue", colour = "white"),
axis.text.x = element_text(angle = 45, hjust = 1)) +
annotation_scale(location = "br", width_hint = 0.5) +
annotation_north_arrow(location = "tl", which_north = "grid",
pad_x = unit(0.75, "in"), pad_y = unit(0.5, "in"),
style = north_arrow_fancy_orienteering())
mi_mapa
# Crear un mapa a escala
mi_mapa <- ggplot(data = world) +
geom_sf(fill = "antiquewhite") +
geom_point(data = datos, aes(x = Long.Decim, y = Lat.Decima, color = Ecotipo), size = 3) +
geom_text_repel(data = datos, aes(x = Long.Decim, y = Lat.Decima, label = Ecotipo), size = 5, box.padding = 0.4) +
labs(x = "Longitud", y = "Latitud") +
scale_color_viridis(discrete = TRUE, name = "Ecotipos") +
theme_bw() +
theme(legend.position = "none", text = element_text(size = 20),
panel.grid.major = element_line(color = gray(.5),
linetype = "dashed",
size = 0.5),
panel.background = element_rect(fill = "aliceblue", colour = "white"),
axis.text.x = element_text(angle = 45, hjust = 1)) +
xlim(0, 20) + ylim(40, 65) +
annotation_scale(location = "br", width_hint = 0.1) +
annotation_north_arrow(location = "tl", style = north_arrow_orienteering(), pad_x = unit(0.1, "in"), pad_y = unit(0.1, "in"))
mi_mapa
emergencia <- read_csv("Emergencia-2023-1-autumn - pretormenta.csv")
emergencia <- emergencia %>%
mutate(SubjID = row_number()) %>%
select(SubjID, everything())
str(emergencia)
# Transformar los datos para tener los valores de germinación en formato tidy
germinacion_transformada <- emergencia %>%
gather(dia, germ, D1:D19) %>%
mutate(dia = as.numeric(str_replace(dia, "D", "")))
# Mostrar los datos transformados
print(germinacion_transformada)
head(germinacion_transformada)
# Nuevos nombres para el DataFrame y las columnas
nuevo_nombre_df <- "germ_otono_2023_1"
nuevos_nombres_columnas <- c("ID", "Ecotipo", "TRAT", "Bloque_Rep"
, "Siembra", "N_seeds", "prop", "dia", "germ")
# Cambiar los nombres del DataFrame y las columnas
germ_otono_2023_1 <- germinacion_transformada %>%
rename_with(~ if_else(. %in% names(germinacion_transformada), nuevos_nombres_columnas[match(., names(germinacion_transformada))], .))
# Verificar los cambios en el nuevo DataFrame
print(germ_otono_2023_1)
# trabajo sobre el data frame indicando la clase de cada variable
germ_otono_2023_1$Ecotipo <- as.factor(germ_otono_2023_1$Ecotipo)
germ_otono_2023_1$Ecotipo <- factor(germ_otono_2023_1$Ecotipo
, levels = c("Wa-1","Ra-0"
,"Sha","Ler-0"
,"Oy-0","Cvi-0"
,"Tu-0","Ws-0"
,"Cen-0","Ömö2-1"))
germ_otono_2023_1$TRAT <- as.factor(germ_otono_2023_1$TRAT)
str(germ_otono_2023_1)
emergencia1 <- ddply(germ_otono_2023_1, c("Ecotipo", "TRAT"), summarize,
pm = mean(prop, na.rm=T),
se = sd(prop, na.rm=T))
cvemergencia1 <- ddply(emergencia1, c("Ecotipo", "TRAT"), summarize,
cvprop = se/pm)
library(reshape)
wcvATp18<- reshape(cvemergencia1, timevar= "Ecotipo", idvar= "TRAT", direction= "wide")
colnames(wcvATp18)<- c("Wa","Ra", "Sha", "Ler", "Oy", "Cvi", "Tu", "Ws", "Cen", "Omo")
colnames(wcvATp18)<- c("TRAT","Wa","Ra", "Sha", "Ler", "Oy", "Cvi", "Tu", "Ws", "Cen", "Omo")
row.names(wcvATp18)<- wcvATp18$Mat
wcvATp18<- wcvATp18[,1:8]
wcvATp18<- reshape(cvemergencia1, timevar= "Ecotipo", idvar= "TRAT", direction= "wide")
colnames(wcvATp18)<- c("TRAT","Wa","Ra", "Sha", "Ler", "Oy", "Cvi", "Tu", "Ws", "Cen", "Omo")
row.names(wcvATp18)<- wcvATp18$Mat
wcvATp18<- wcvATp18[,1:11]
#ESTE NO USE
library(fmsb)
radarchart( wcvATp18,
cglty=1,
cglcol="grey",
cglwd=1,
pcol=cbPalette,
plwd=2,
plty=1)
legend("topright", legend = rownames(wcvATp18[-c(1,2),]), bty = "n", pch=20 , col=cbPalette , text.col = "grey25", cex=1.2, pt.cex=3)
radarchart( wcvATp18,
cglty=1,
cglcol="grey",
cglwd=1,
pcol=cbPalette,
plwd=2,
plty=1)
wcvATp18<- reshape(cvemergencia1, timevar= "Ecotipo", idvar= "TRAT", direction= "wide")
colnames(wcvATp18)<- c("TRAT","Wa","Ra", "Sha", "Ler", "Oy", "Cvi", "Tu", "Ws", "Cen", "Omo")
row.names(wcvATp18)<- wcvATp18$Mat
radarchart( wcvATp18,
cglty=1,
cglcol="grey",
cglwd=1,
pcol=cbPalette,
plwd=2,
plty=1)
radarchart( wcvATp18,
cglty=1,
cglcol="grey",
cglwd=,
pcol=cbPalette,
plwd=,
plty=1)
radarchart(wcvATp18)
wcvATp18
legend("topright", bty = "n", pch=20 , col=cbPalette , text.col = "grey25", cex=1.2, pt.cex=3)
radarchart( wcvATp18,
cglty=1,
cglcol="grey",
cglwd=,
pcol=cbPalette,
plwd=,
plty=1)
radarchart(wcvATp18,
cglty=1,
cglcol="grey",
cglwd=3,
pcol=cbPalette,
plwd=3,
plty=1)
View(wcvATp18)
cvATp18<- read.csv('cvATprop.csv')
setwd("~/Desktop/RABIOS/Coeficiente de Variación")
cvATp18<- read.csv('cvATprop.csv')
setwd("~/Desktop/RABIOS/Coeficiente de Variación")
cvATp18<- read.csv('cvATprop.csv')
cvATp18<- read.csv('cvATprop.csv')
setwd("~/Desktop/RABIOS/Coeficiente de Variación")
cvATp18<- read.csv('cvATprop.csv')
library(tidyverse)
library(tidyverse)
library(plyr)
library(hrbrthemes)
library(scales)
cvATp18<- read.csv('cvATprop.csv')
cvATp18$GT<- as.factor(cvATp18$GT)
cvATp18$IT<- as.factor(cvATp18$IT)
cvATp18$Mat<- as.factor(cvATp18$Mat)
cvATp18<- cvATp18[cvATp18$IT=="18",]
cvATp18<- cbind(cvATp18[,1], cvATp18[,3:4])
cvATp18<- droplevels(cvATp18)
colnames(cvATp18)<- c("GT", "Mat", "CV")
library(reshape)
wcvATp18<- reshape(cvATp18, timevar= "GT", idvar= "Mat", direction= "wide")
View(cvATp18)
View(wcvATp18)
colnames(wcvATp18)<- c("Mat","Col", "rdr2", "rdr6", "dcl234", "ago4", "nrpd2a", "rdd", "Ler")
row.names(wcvATp18)<- wcvATp18$Mat
wcvATp18<- wcvATp18[,1:8]
wcvATp18<- reshape(cvATp18, timevar= "GT", idvar= "Mat", direction= "wide")
colnames(wcvATp18)<- c("Mat","Col", "rdr2", "rdr6", "dcl234", "ago4", "nrpd2a", "rdd", "Ler")
row.names(wcvATp18)<- wcvATp18$Mat
wcvATp18<- wcvATp18[,1:8]
#ESTE NO USE
library(fmsb)
radarchart( wcvATp18,
cglty=1,
cglcol="grey",
cglwd=1,
pcol=cbPalette,
plwd=2,
plty=1)
radarchart( wcvATp18,
cglty=1,
cglcol="grey",
cglwd=1,
#  pcol=cbPalette,
plwd=2,
plty=1)
library(brew)
detach("package:brew", unload = TRUE)
